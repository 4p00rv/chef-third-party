{
  "name": "datadog",
  "description": "Installs/Configures datadog components",
  "long_description": "Where to Find the Code\n======================\nTo submit issues and patches please visit https://github.com/DataDog/chef-datadog.\nThe code is licensed under the Apache License 2.0 (see  LICENSE for details).\n\n[![Chef cookbook](https://img.shields.io/cookbook/v/datadog.svg?style=flat)](https://github.com/DataDog/chef-datadog)\n[![Build Status](https://travis-ci.com/DataDog/chef-datadog.svg?branch=master)](https://travis-ci.com/DataDog/chef-datadog)\n[![Circle CI](https://circleci.com/gh/DataDog/chef-datadog.svg?style=shield)](https://circleci.com/gh/DataDog/chef-datadog)\n[![Coverage Status](https://coveralls.io/repos/DataDog/chef-datadog/badge.svg?branch=master)](https://coveralls.io/r/DataDog/chef-datadog?branch=master)\n[![GitHub forks](https://img.shields.io/github/forks/DataDog/chef-datadog.svg)](https://github.com/DataDog/chef-datadog/network)\n[![GitHub stars](https://img.shields.io/github/stars/DataDog/chef-datadog.svg)](https://github.com/DataDog/chef-datadog/stargazers)\n[![Build Status](https://jenkins-01.eastus.cloudapp.azure.com/job/datadog-cookbook/badge/icon)](https://jenkins-01.eastus.cloudapp.azure.com/job/datadog-cookbook/)\n\nDatadog Cookbook\n================\n\nChef recipes to deploy Datadog's components and configuration automatically.\n\nThis cookbook includes support for:\n\n* Datadog Agent version 6.0 and up: please refer to\nthe [dedicated section](#agent-6-support) and the [inline docs](https://github.com/DataDog/chef-datadog/blob/v2.15.0/attributes/default.rb#L31-L75)\nfor more details on how to use it\n* Datadog Agent version 5.x\n\n**Log collection is now available with Agent v6, please refer to the [inline docs](https://github.com/DataDog/chef-datadog/blob/v2.15.0/attributes/default.rb#L383-L388) to enable it.**\n\n*Note: This README may refer to features that are not released yet. Please check the README of the\ngit tag/the gem version you're using for your version's documentation*\n\nRequirements\n============\n- chef >= 10.14\n\nPlatforms\n---------\n\n* Amazon Linux\n* CentOS\n* Debian\n* RedHat\n* Scientific Linux\n* Ubuntu\n* Windows (requires chef >= 12.0)\n* SUSE (requires chef >= 13.3)\n\nCookbooks\n---------\n\nThe following Opscode cookbooks are dependencies:\n\n* `apt`\n* `chef_handler`\n* `windows`\n* `yum`\n\n**Note for Chef 11 users**: please use these additional dependency version contraints for compatibility with Chef 11:\n\n```\ncookbook 'apt', '< 4.0'\ncookbook 'chef_handler', '< 2.0'\ncookbook 'windows', '< 2.0'\ncookbook 'yum', '~> 3.0'\n```\n\n(in Berkshelf/Librarian format)\n\nRecipes\n=======\n\ndefault\n-------\nJust a placeholder for now, when we have more shared components they will probably live there.\n\ndd-agent\n--------\nInstalls the Datadog agent on the target system, sets the API key, and start the service to report on the local system metrics\n\n**Notes for Windows**:\n\n* With Chef >= 12.6 _and_ the `windows` cookbook >= 1.39.0, Agent upgrades are known to fail.\n  For Chef>=12.6 users on Windows, we recommend pinning the `windows` cookbook to a lower version (`~> 1.38.0` for instance).\n\n  If that's not an option, a known workaround is to use the `remove-dd-agent` recipe (since the `2.5.0` version of the present cookbook) to uninstall the Agent\n  prior to any Agent upgrade.\n\n* Because of changes in the Windows Agent packaging and install in version 5.12.0, when upgrading the Agent from versions <= 5.10.1 to versions >= 5.12.0,\n  please set the `windows_agent_use_exe` attribute to `true`.\n\n  Once the upgrade is complete, you can leave the attribute to its default value (`false`).\n\n  For more information on these Windows packaging changes, see the related [docs on the dd-agent wiki](https://github.com/DataDog/dd-agent/wiki/Windows-Agent-Installation).\n\ndd-handler\n----------\nInstalls the [chef-handler-datadog](https://rubygems.org/gems/chef-handler-datadog) gem and invokes the handler at the end of a Chef run to report the details back to the newsfeed.\n\ndogstatsd-(python|ruby)\n-----------------------\nInstalls the language-specific libraries to interact with `dogstatsd`.\n\n* Note for Chef >= 13 users: the `datadog::dogstatsd-python` recipe is not compatible with Chef >= 13, as it relies on a resource that was removed in Chef 13.0.\n  To install the `dogstatsd-python` library with Chef, please add a dependency on the `poise-python` cookbook to your custom/wrapper cookbook, and use the following resource:\n  ```ruby\n  python_package 'dogstatsd-python' # assumes that python and pip are installed\n  ```\n  For more advanced usage, please refer to the [`poise-python` cookbook documentation](https://github.com/poise/poise-python)\n\nddtrace-(python|ruby)\n---------------------\nInstalls the language-specific libraries for application Traces (APM).\n\n* Note for Chef >= 13 users: the `datadog::ddtrace-python` recipe is not compatible with Chef >= 13, as it relies on a resource that was removed in Chef 13.0.\n  To install the `ddtrace-python` library with Chef, please add a dependency on the `poise-python` cookbook to your custom/wrapper cookbook, and use the following resource:\n  ```ruby\n  python_package 'ddtrace' # assumes that python and pip are installed\n  ```\n  For more advanced usage, please refer to the [`poise-python` cookbook documentation](https://github.com/poise/poise-python)\n\nother\n-----\nThere are many other integration-specific recipes, that are meant to assist in deploying the correct agent configuration files and dependencies for a given integration.\n\nResources\n=========\n\ndatadog_monitor\n---------------\n\nThe `datadog_monitor` resource will help you to enable Agent integrations.\n\nThe default action `:add` enables the integration by filling a configuration file for the integration with the values provided to the resource, setting the correct permissions on that file, and restarting the Agent.\n\nThe `:remove` action disables an integration.\n\n### Syntax\n\n```ruby\ndatadog_monitor 'name' do\n  init_config                       Hash # default value: {}\n  instances                         Array # default value: []\n  logs                              Array # default value: []\n  use_integration_template          true, false # default value: false\n  action                            Symbol # defaults to :add if not specified\nend\n```\n\n#### Actions\n\n* `:add` Default. Enable the integration.\n* `:remove` Use this action to disable the integration.\n\n#### Properties\n\n* `'name'` is the name of the Agent integration to configure and enable\n* `instances` are the fields used to fill values under the `instances` section in the integration configuration file.\n* `init_config` are the fields used to fill values under the the `init_config` section in the integration configuration file.\n* `logs` are the fields used to fill values under the the `logs` section in the integration configuration file.\n* `use_integration_template`: set to `true` (recommended) to use a default template that simply writes the values of `instances`, `init_config`and `logs` in YAML under their respective YAML keys. (defaults to `false` for backward compatibility, will default to `true` in a future major version of the cookbook)\n\n### Example\n\nThis example enables the ElasticSearch integration by using the `datadog_monitor` resource. It provides the instance configuration (in this case: the url to connect to ElasticSearch) and set the `use_integration_template` flag to use the default configuration template.\n\nNote that the Agent installation needs to be earlier in the run list.\n\n```ruby\ninclude_recipe 'datadog::dd-agent'\n\ndatadog_monitor 'elastic'\n  instances  [{'url' => 'http://localhost:9200'}]\n  use_integration_template true\nend\n```\n\nSee `recipes/` for many examples using the `datadog_monitor` resource.\n\nUsage\n=====\n\n### Agent 6 Support\nPlease note the cookbook now supports installing both Agent v5 and Agent v6 of the Datadog Agent on Linux (since v2.14.0) and Windows (since v2.15.0). By default versions `<=2.x` of the cookbook will default to install Agent5, you may however override this behavior with the `node['datadog']['agent6']` attribute.\n  ```\n  default_attributes(\n    'datadog' => {\n      'agent6' => true\n    }\n  )\n  ```\n\nNote: to _upgrade_ to Agent 6 on a node with Agent 5 already installed, you also have to pin `agent6_version` to a v6 version (recommended), or set `agent6_package_action` to `'upgrade'`.\n\nAdditional attributes are available to have finer control over how you install Agent 6. These are Agent 6 counterparts to several well known Agent 5 attributes (code [here](https://github.com/DataDog/chef-datadog/blob/master/attributes/default.rb#L31-L75)):\n * `agent6_version`: allows you to pin the agent version (recommended).\n * `agent6_package_action`: defaults to `'install'`, may be set to `'upgrade'` to automatically upgrade to latest (not recommended, we recommend pinning to a version with `agent6_version` and change that version to upgrade).\n * `agent6_aptrepo`: desired APT repo for the agent. Defaults to `http://apt.datadoghq.com`\n * `agent6_aptrepo_dist`: desired distribution for the APT repo. Defaults to `stable`\n * `agent6_yumrepo`: desired YUM repo for the agent. Defaults to `https://yum.datadoghq.com/stable/6/x86_64/`\n\nPlease review the [attributes/default.rb](https://github.com/DataDog/chef-datadog/blob/master/attributes/default.rb) file (at the version of the cookbook you use) for the list and usage of the attributes used by the cookbook.\n\nFor general information on the Datadog Agent 6, please refer to the [datadog-agent](https://github.com/DataDog/datadog-agent/) repo.\n\n#### Windows Agent v6 installation\n\nStarting with version `>= 6.11`, the Windows Agent v6 must be installed with datadog\ncookbook version `>= 2.18.0`.\n\nThis is due to the Agent v6 running with an unprivileged user on Windows\nsince 6.11. However, prior to 2.18.0, the datadog cookbook was enforcing\nAdministrators privileges to the Datadog Agent directories and files.\n\n### Extra configuration\n\nShould you wish to add additional elements to the Agent v6 configuration file\n(typically `datadog.yaml`) that are not directly available\nas attributes of the cookbook, you may use the `node['datadog']['extra_config']`\nattribute. This attribute is a hash and will be marshaled into the configuration\nfile accordingly.\n\nE.g.\n\n ```\n default_attributes(\n   'datadog' => {\n     'extra_config' => {\n        'secret_backend_command' => '/sbin/local-secrets'\n     }\n   }\n )\n ```\n\nThis example will set the field `secret_backend_command` in the configuration\nfile `datadog.yaml`.\n\n### Instructions\n\n1. Add this cookbook to your Chef Server, either by installing with knife or by adding it to your Berksfile:\n  ```\n  cookbook 'datadog', '~> 2.14.0'\n  ```\n2. Add your API Key either:\n  * as a node attribute via an `environment` or `role`, or\n  * as a node attribute by declaring it in another cookbook at a higher precedence level, or\n  * in the node `run_state` by setting `node.run_state['datadog']['api_key']` in another cookbook preceding `datadog`'s recipes in the run_list. This approach has the benefit of not storing the credential in clear text on the Chef Server.\n3. Create an 'application key' for `chef_handler` [here](https://app.datadoghq.com/account/settings#api), and add it as a node attribute or in the run state, as in Step #2.\n\n   NB: if you're using the run state to store the api and app keys you need to set them at compile time before `datadog::dd-handler` in the run list.\n\n4. Enable Agent integrations by including their recipes and configuration details in your role’s run-list and attributes.\n   Note that you can also create additional integrations recipes by using the `datadog_monitor` resource.\n5. Associate the recipes with the desired `roles`, i.e. \"role:chef-client\" should contain \"datadog::dd-handler\" and a \"role:base\" should start the agent with \"datadog::dd-agent\". Here's an example role with both recipes plus the MongoDB integration enabled.\n  ```\n  name 'example'\n  description 'Example role using DataDog'\n\n  default_attributes(\n    'datadog' => {\n      'agent6' => true,\n      'api_key' => 'api_key',\n      'application_key' => 'app_key',\n      'mongo' => {\n        'instances' => [\n          {'host' => 'localhost', 'port' => '27017'}\n        ]\n      }\n    }\n  )\n\n  run_list %w(\n    recipe[datadog::dd-agent]\n    recipe[datadog::dd-handler]\n    recipe[datadog::mongo]\n  )\n  ```\n  NB: set the `agent6` attribute to `false` in the `datadog` hash if you'd like to install Agent v5.\n\n6. Wait until `chef-client` runs on the target node (or trigger chef-client manually if you're impatient)\n\nWe are not making use of data_bags in this recipe at this time, as it is unlikely that you will have more than one API key and one application key.\n\nFor more deployment details, visit the [Datadog Documentation site](http://docs.datadoghq.com/).\n\nAWS OpsWorks Chef Deployment\n----------------------------\n\n1. Add Chef Custom JSON:\n  ```json\n  {\"datadog\":{\"agent6\": true, \"api_key\": \"<API_KEY>\", \"application_key\": \"<APP_KEY>\"}}\n  ```\n\n2. Include the recipe in install-lifecycle recipe:\n  ```ruby\n  include_recipe 'datadog::dd-agent'\n  ```\n\n",
  "maintainer": "Datadog",
  "maintainer_email": "package@datadoghq.com",
  "license": "Apache-2.0",
  "platforms": {
    "amazon": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "windows": ">= 0.0.0",
    "suse": ">= 0.0.0"
  },
  "dependencies": {
    "apt": ">= 0.0.0",
    "chef_handler": ">= 1.2",
    "windows": ">= 0.0.0",
    "yum": ">= 3.0"
  },
  "recommendations": {

  },
  "suggestions": {
    "sudo": ">= 0.0.0"
  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {
    "datadog::default": "Default",
    "datadog::dd-agent": "Installs the Datadog Agent",
    "datadog::dd-handler": "Installs a Chef handler for Datadog",
    "datadog::repository": "Installs the Datadog package repository",
    "datadog::dogstatsd-python": "Installs the Python dogstatsd package for custom metrics",
    "datadog::dogstatsd-ruby": "Installs the Ruby dogstatsd package for custom metrics",
    "datadog::ddtrace-python": "Installs the Python ddtrace package for APM",
    "datadog::ddtrace-ruby": "Installs the Ruby ddtrace package for APM",
    "datadog::cassandra": "Installs and configures the Cassandra integration",
    "datadog::couchdb": "Installs and configures the CouchDB integration",
    "datadog::postfix": "Installs and configures the Postfix integration"
  },
  "version": "2.19.0",
  "source_url": "https://github.com/DataDog/chef-datadog",
  "issues_url": "https://github.com/DataDog/chef-datadog/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 10.14"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
